<?php

/**
 * @file
 * A module to implement custom landing pages.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\Language;

/**
 * Implements hook_theme().
 */
function landing_page_theme($existing, $type, $theme, $path) {
  $template_lists = \Drupal::config('landing_page.settings')->get('landing_page_templates_list');
  $theme = array();
  unset($template_lists['default']);
  foreach ($template_lists as $key => $template_lists) {
    $theme['landing_page_' . $key] = array(
      'template' => 'landing-page--' . $key,
      'path' => $template_lists[1],
    );
  }

  return $theme;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function landing_page_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $field_template_list = $node->field_template_list;
    if ($field_template_list) {
      $field_template_list_value = $field_template_list->getValue();
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      if (($node->bundle() == 'landing_page') && $field_template_list_value[0]['value'] != 'default' && $path_args[3] != 'edit') {
        $suggestions[] = 'landing_page_' . $field_template_list_value[0]['value'];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Check if the form is of landing page. Populate the select box
 * with the variable `landing_page_templates_list` set.
 * Include checkbox and css textarea's in corresponding fieldset's.
 */
function landing_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_landing_page_form') {
    $form['js'] = array(
      '#type' => 'fieldset',
      '#title' => t('JS Inputs'),
      '#weight' => 5,
      '#collapsible' => TRUE,
    );
    $form['js']['field_turn_off_default_js'] = $form['field_turn_off_default_js'];
    unset($form['field_turn_off_default_js']);
    $form['js']['field_header_js'] = $form['field_header_js'];
    unset($form['field_header_js']);
    $form['js']['field_footer_js'] = $form['field_footer_js'];
    unset($form['field_footer_js']);
    $form['css'] = array(
      '#type' => 'fieldset',
      '#title' => t('CSS Inputs'),
      '#weight' => 5,
      '#collapsible' => TRUE,
    );
    $form['css']['field_turn_off_default_css'] = $form['field_turn_off_default_css'];
    unset($form['field_turn_off_default_css']);
    $form['css']['field_css'] = $form['field_css'];
    unset($form['field_css']);
    // Check if the user has permission to add custom CSS.
    // Disable the field, otherwise.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node == NULL) {
      // For new node.
      $custom_css_language = Language::LANGCODE_NOT_SPECIFIED;
      $header_js_language = Language::LANGCODE_NOT_SPECIFIED;
    }
    else {
      // For edit node.
      $custom_css_language = field_language($form['#node'], 'field_css');
      $header_js_language = field_language($form['#node'], 'field_header_js');
    }
    if (!\Drupal::currentUser()->hasPermission('landing page include custom css')) {
      $form['css']['field_css'][$custom_css_language][0]['#disabled'] = TRUE;
      $form['css']['field_css'][$custom_css_language][0]['#suffix'] = 'You don\'t have permission to add custom CSS.';
    }
    // Check if the user has permission to add custom JS.
    // Disable the field, otherwise.
    if (!\Drupal::currentUser()->hasPermission('landing page include custom js')) {
      $form['js']['field_header_js'][$header_js_language][0]['#disabled'] = TRUE;
      $form['js']['field_footer_js'][$header_js_language][0]['#disabled'] = TRUE;
      $form['js']['field_footer_js'][$header_js_language][0]['#suffix'] = 'You don\'t have permission to add custom JS.';
    }
  }
}

/**
 * Implements hook_css_alter().
 *
 * Unsetting the default css.
 *
 * Load the node details if the current url is a node.
 * If it is of type landing_page and checkbox to override the deafult css is on.
 * Unset the default CSS.
 */
function landing_page_css_alter(&$css) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if (($path_args[1] == 'node') && (is_numeric($path_args[2])) && (!($path_args[3]) || ($path_args[3] == ''))) {
    $node = \Drupal::entityManager()->getStorage('node')->load($path_args[2]);
    if ($node->bundle() == 'landing_page') {
      $default_css_field = $node->field_turn_off_default_css;
      $default_css = $default_css_field->getValue();
      if ($default_css[0][value]) {
        foreach ($css as $key => $value) {
          if (!is_numeric($key)) {
            unset($css[$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 *
 * Unsetting the default js.
 *
 * Load the node details if the current url is a node.
 * If it is of type landing_page and checkbox to override the deafult js is on.
 * Unset the default JS.
 */
function landing_page_js_alter(&$js) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if (($path_args[1] == 'node') && (is_numeric($path_args[2])) && (!($path_args[3]) || ($path_args[3] == ''))) {
    $node = \Drupal::entityManager()->getStorage('node')->load($path_args[2]);
    if ($node->bundle() == 'landing_page') {
      $default_js_field = $node->field_turn_off_default_js;
      $default_js = $default_js_field->getValue();
      if ($default_js[0][value]) {
        foreach ($js as $key => $value) {
          if (!is_numeric($key)) {
            unset($js[$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function landing_page_page_attachments(array &$page) {
  $route = \Drupal::routeMatch()->getRouteName();

  if ($route == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_type = $node->type->getValue();
    $type = $node_type['0']['target_id'];

    $user = \Drupal::currentUser();

    if ($user->hasPermission('landing page include custom css') && ($type == 'landing_page')) {
      $css = $node->field_css->getValue();
      $field_header_js = $node->field_header_js->getValue();
      $field_footer_js = $node->field_footer_js->getValue();
      $page['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          '#tag' => 'style',
          '#value' => $css[0]['value'],
        ],
        'landing-page-css',
      ];
      $page['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          '#tag' => 'script',
          '#value' => $field_header_js[0]['value'],
        ],
        'landing-page-header',
      ];
      $page['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          '#tag' => 'script',
          '#value' => $field_footer_js[0]['value'],
        ],
        'landing-page-footer',
      ];
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 */
function landing_page_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'landing_page_filter_process_format';
      }
    }
  }
}

/**
 * Callback for landing_page_element_info_alter().
 */
function landing_page_filter_process_format($element) {
  $element = filter_process_format($element);

  // Change the default text format of the 'body' field.
  if ($element['#bundle'] == 'landing_page' && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'landing_page';
  }

  return $element;
}

/**
 * Get the template type from all the template files in the templates folder.
 *
 * If a custom path is set, take all the template files from
 * the folder, By default system scans the template files from the current
 * active theme's templates folder and landing page module's template folder.
 * The template file format is landing-page--{type}.tpl.php,
 *
 * returns $template_list
 *   List of template names in the template folders.
 */
function landing_page_get_templates() {
  $config = \Drupal::config('landing_page.settings');
  $paths_to_scan = array();
  $template_list = array('default' => 'default');

  // Get active theme's templates path.
  $theme = \Drupal::config('system.theme')->get('default');

  $theme_path = drupal_get_path('theme', $theme) . '/templates/';
  $theme_directory_path = opendir($theme_path);

  // Get landing page module's template path.
  $landing_page_module_path = drupal_get_path('module', 'landing_page') . '/templates/';
  $module_directory_path = opendir($landing_page_module_path);

  // Get custom template path configured by admin.
  $custom_path = $config->get('landing_page_templates_custom_path');
  if ($custom_path) {
    $custom_directory_path = opendir($custom_path);
    $paths_to_scan[$custom_path] = $custom_directory_path;
  }

  // Push paths to be scanned, into an array.
  $paths_to_scan[$theme_path] = $theme_directory_path;
  $paths_to_scan[$landing_page_module_path] = $module_directory_path;
  foreach ($paths_to_scan as $directory_path => $directory_source) {
    while ($file_entry = readdir($directory_source)) {
      if (strpos($file_entry, 'landing-page--') === 0 && strpos($file_entry, 'landing-page--') !== FALSE) {
        $template_files[$directory_path] = $file_entry;
      }
    }
  }
  foreach ($template_files as $key => $value) {
    $template = basename($value);
    $template_name = str_replace('landing-page--', '', $template);
    $template_type = str_replace('.html.twig', '', $template_name);
    $template_list[$template_type] = array($template_type, $key);
  }

  return $template_list;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function landing_page_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition->getName() == 'field_template_list') {
    $templates = _get_landing_page_template_list();
    if (!empty($context['items']->getValue())) {
      $selected_template = $context['items']->getValue();
      $field_definition->setDefaultValue($selected_template[0]['value']);
    }
    $element['#options'] = $templates;
  }
}

/**
 * Function to add template lists to forms allowed values.
 */
function _get_landing_page_template_list() {
  $templates = \Drupal::config('landing_page.settings')->get('landing_page_templates_list');
  $keys = array_keys($templates);

  return array_combine($keys, $keys);
}
